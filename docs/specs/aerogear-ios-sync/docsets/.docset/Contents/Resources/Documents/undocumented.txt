JsonPatchEdit.swift
	public init(clientId: String, documentId: String, clientVersion: Int, serverVersion: Int, checksum: String, diffs: [JsonPatchDiff])
	public func ==(lhs: JsonPatchEdit, rhs: JsonPatchEdit) -> Bool
DiffMatchPatchSynchronizer.swift
	let dmp: DiffMatchPatch
	public init()
JsonPatchDiff.swift
	public enum Operation : String, Printable
	public var description : String
	public init(operation: Operation, path: String, value: AnyObject?)
	public init(operation: Operation)
DiffMatchPatchMessage.swift
	public init(id: String, clientId: String, edits: [DiffMatchPatchEdit])
ClientSyncEngine.swift
	public init(synchronizer: CS, dataStore: D)
ShadowDocument.swift
	public init(clientVersion: Int, serverVersion: Int, clientDocument: ClientDocument<T>)
DiffMatchPatchEdit.swift
	public init(clientId: String, documentId: String, clientVersion: Int, serverVersion: Int, checksum: String, diffs: [DiffMatchPatchDiff])
	public func ==(lhs: DiffMatchPatchEdit, rhs: DiffMatchPatchEdit) -> Bool
PatchMesssage.swift
	init(id: String, clientId: String, edits: [E])
InMemoryDataStore.swift
	func ==(lhs: Key, rhs: Key) -> Bool
	init(id: String, clientId: String)
	var hashValue: Int
BackupShadowDocument.swift
	public init(version: Int, shadowDocument: ShadowDocument<T>)
JsonPatchMessage.swift
	public var description: String
	public init(id: String, clientId: String, edits: [JsonPatchEdit])
DiffMatchPatchDiff.swift
	public enum Operation : String, Printable
	public var description : String
	public init(operation: Operation, text: String)
Document.swift
	init(id: String, content: T)
JsonPatchSynchronizer.swift
	public init()
ClientDocument.swift
	public init(id: String, clientId: String, content: T)
