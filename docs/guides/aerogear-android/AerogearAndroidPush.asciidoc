---
layout: basic
title: AeroGear Android Push
---

== AeroGear Push APIs for Android

AeroGear for Android provides support for integrating with Push services.  Currently only Google's Cloud Messaging(GCM) with the Aerogear Unified Push Server is supported, but we are planning to add support for Mozilla's Simple Push, MQTT soon, and standalone GCM.

=== Push in a Nutshell

Push messaging is a mechanism for sending data to mobile clients from a remote server.  For mobile services this reduces battery usage, removes polling code, and provides for a better user experience as data updates can be displayed in real time.

On Android messages that GCM receives from a application server are sent to the Android device over an XMPP connection managed by the operating system.  These messages are then extracted and passed to applications via a BroadcastReceiver.  Android applications can register to receive push notificaitons by declaring a receiver in their AndroidManifest.xml files.

=== Push API overview

http://aerogear.org/docs/specs/aerogear-android/org/jboss/aerogear/android/unifiedpush/Registrations.html[Registrations]
 : Similar to PipeLine, this class acts as a factory and registry of *PushRegistrars*.  Additionally this class provides static methods to register a MessageHandler to be informed of a push message.

http://aerogear.org/docs/specs/aerogear-android/org/jboss/aerogear/android/unifiedpush/PushRegistrar.html[PushRegistrar]
 : This is the main class which handles registering and unregistering from a push network.  

http://aerogear.org/docs/specs/aerogear-android/org/jboss/aerogear/android/impl/unifiedpush/PushTypes.html[PushTypes]
 : An enum of types supported by the Push APIs

http://aerogear.org/docs/specs/aerogear-android/org/jboss/aerogear/android/unifiedpush/PushConfig.html[PushConfig]
 : Provides configuration options for constructing a push registrar from the Registrations class.

http://aerogear.org/docs/specs/aerogear-android/org/jboss/aerogear/android/unifiedpush/MessageHandler.html[MessageHandler]
 : An interface which is called when a push message is consumed.

=== Examples

==== Configuring your application to receive Push messages

Before you can use GCM notifications in Android, your applicaiton's AndroidManifest.xml must be updated to include both permissions for GCM and a broadcast receiver to handle push messages from the service.

Note: the package 'com.mypackage' should be replaced with your application's package attribute.

To enable the permissions (necessary for Android < 4.2 ie 95% of Android devices) add these as a child of the manifest element. 

[source, xml]
----
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.GET_ACCOUNTS" />
<uses-permission android:name="android.permission.WAKE_LOCK" />
<uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />

<permission
android:name="com.mypackage.C2D_MESSAGE"
android:protectionLevel="signature" />

<uses-permission android:name="com.mypackage.C2D_MESSAGE" />
----
 

and add this element as a child of the application element.


[source, xml]
----
<receiver
    android:name="org.jboss.aerogear.android.unifiedpush.AeroGearGCMMessageReceiver"
    android:permission="com.google.android.c2dm.permission.SEND" >
    <intent-filter>
        <action android:name="com.google.android.c2dm.intent.RECEIVE" />
        <category android:name="com.mypackage" />
    </intent-filter>

</receiver> 

----
 
You can also add a default message handler to the receiver.  If there are currently no handlers registered on the Registrations object it will handle the message.

[source, xml]
----
<receiver
    android:name="org.jboss.aerogear.android.unifiedpush.AeroGearGCMMessageReceiver"
    android:permission="com.google.android.c2dm.permission.SEND" >
    <intent-filter>
        <action android:name="com.google.android.c2dm.intent.RECEIVE" />
        <category android:name="com.mypackage" />
    </intent-filter>
    <meta-data android:name="DEFAULT_MESSAGE_HANDLER_KEY" android:value="org.jboss.aerogear.android.push.NotifyingHandler"/>
</receiver> 

----



==== Registering with GCM and Unified Push Server

This code example demonstrates how to create a PushConfig, provide values required to register the application with GCM and Unified Push, and perform the registration.

[source,java]
----
Registrations registrations = new Registrations();
PushConfig config = new PushConfig(new URL(UNIFIED_PUSH_URL), GCM_SENDER_ID);

config.setVariantID(VARIANT_ID);
config.setSecret(SECRET);

PushRegistrar registrar = registrations.push("registrar", config);

registrar.register(getApplicationContext(), new Callback<Void>() {

    @Override
    public void onSuccess(Void ignore) {
        Toast.makeText(MainApplication.this, "Register successful", Toast.LENGTH_LONG).show();
        Log.i(TAG, "SUCCESS");
    }

    @Override
    public void onFailure(Exception exception) {
        Toast.makeText(MainApplication.this, "Register failed", Toast.LENGTH_LONG).show();
        Log.e(TAG, exception.getMessage(), exception);
    }
});

----

If you no longer wish to receive Push notifications, you may unregister.

[source,java]
----
registrar.unregister(getApplicationContext(), new Callback<Void>() {

    @Override
    public void onSuccess(Void ignore) {
        Toast.makeText(MainApplication.this, "Register successful", Toast.LENGTH_LONG).show();
        Log.i(TAG, "SUCCESS");
    }

    @Override
    public void onFailure(Exception exception) {
        Toast.makeText(MainApplication.this, "Register failed", Toast.LENGTH_LONG).show();
        Log.e(TAG, exception.getMessage(), exception);
    }
});

----

==== Handling messages

Currently, push messages are received by an instance of AeroGearGCMMessageReceiver.  They are processed and passed to Registrations via the protected notifyHandlers method.  

Classes which implement MessageHandler can ask that their methods be called on either the UI thread or on a background thread.  UI threads are most useful for Activities and Fragments, background threads are most useful for everything else.

In an Activity you MUST remove the handler when the Activity goes into the background and MUST reenable it when it comes into the foreground.
[source,java]
----
public class MainActivity extends Activity implements MessageHandler{

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		setContentView(R.layout.activity_main);
	}
	
	@Override
	protected void onResume() {
		super.onResume();
                Registrations.registerMainThreadHandler(this);
	}
	
	@Override
	protected void onPause() {
		super.onPause();
		Registrations.unregisterMainThreadHandler(this);
	}

	@Override
	public void onMessage(Context context, Bundle arg0) {
		TextView text = (TextView) findViewById(R.id.text_view1);
		text.setText(arg0.getString("alert"));
		text.invalidate();
	}

	@Override
	public void onDeleteMessage(Context context, Bundle arg0) {
		//ignore
	}

	@Override
	public void onError() {
		//ignore
	}

}
----
