---
layout: basic
title: AeroGear Http
---

== Introduction

link:https://github.com/aerogear/aerogear-ios-http[AeroGear Http] library is designed to be a convenient wrapper against the facilities provided by the underlying foundation networking, based on link:https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLSession_class/[NSURLSession]. In particular, it provides the following features:

- Convenient expose of HTTP verbs
- Pluggable Request and Response serializers with built-in support for URL Enconding and JSON
- Upload (plus MultiPart support) and Download
- HTTP Basic/Digest authentication support

== HTTP verbs

The library exposes common HTTP verbs as methods, taking care of encoding the parameters passed in. Here is an example usage:

```swift
var http = Http(baseURL: "http://server.com")

http.GET("/endpoint",  parameters: ["param": "value"], completionHandler: {(response, error) in
    // handle response
})

http.POST("/endpoint",  parameters: ["param": "value"], completionHandler: {(response, error) in
    // handle response
})
..
// ...similarly, PUT, DELETE and HEAD can be called

```
NOTE: The request is always executed asynchronously in a background thread whereas the completion callbacks are conveniently called in the main thread to give you the chance to update the UI.

NOTE: In the example above, we used the optional '_baseURL_'  parameter of the remote application in order to avoid specifying it on each request. The constructor accepts further parameters that can customize it's behavior e.g setting a custom link:https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSURLSessionConfiguration_class/index.html[NSURLSessionConfiguration]. Head over to the link:https://aerogear.org/docs/specs/aerogear-ios-http/Classes/Http.html#/s:FC12AeroGearHttp4HttpcFMS0_FT7baseURLGSqSS_13sessionConfigCSo25NSURLSessionConfiguration17requestSerializerPS_17RequestSerializer_18responseSerializerPS_18ResponseSerializer__S0_[API documentation] for more information.

By default, the _Http_ object will conveniently use the built-in JSON request and response serializers. See the next section on how you can customize it and create your own.

== Pluggable Request and Response serializers

The link:https://aerogear.org/docs/specs/aerogear-ios-http/Classes/Http.html#/s:FC12AeroGearHttp4HttpcFMS0_FT7baseURLGSqSS_13sessionConfigCSo25NSURLSessionConfiguration17requestSerializerPS_17RequestSerializer_18responseSerializerPS_18ResponseSerializer__S0_[constructor] of the _Http_ object accepts serializers for both the request and response. For the former, objects must conform to the link:https://aerogear.org/docs/specs/aerogear-ios-http/Protocols/RequestSerializer.html[RequestSerializer] protocol, whereas for the latter it accepts objects conforming to the link:https://aerogear.org/docs/specs/aerogear-ios-http/Protocols/ResponseSerializer.html[ResponseSerializer] protocol. 

=== RequestSerializer

When constructing link:https://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSURLSessionTask_class/index.htm[the task] to execute, the library will call link:https://aerogear.org/docs/specs/aerogear-ios-http/Protocols/RequestSerializer.html#/s:FP12AeroGearHttp17RequestSerializer7requestUS0___FRQPS0_FTCSo5NSURL6methodOS_10HttpMethod10parametersGSqGVSs10DictionarySSPSs9AnyObject___7headersGSqGS4_SSSS___CSo12NSURLRequest[RequestSerializer::request] method to construct the appropriate link:https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSURLRequest_Class/[NSURLRequest] to use, passing along any parameters passed by the user:

```swift
func request(url: NSURL, method: HttpMethod, parameters: [String : AnyObject]?, headers: [String : String]?) -> NSURLRequest
```

The library already comes with built-in implementations of the form link:https://aerogear.org/docs/specs/aerogear-ios-http/Classes.html#/s:C12AeroGearHttp21HttpRequestSerializer[HttpRequestSerializer] and link:https://aerogear.org/docs/specs/aerogear-ios-http/Classes.html#/s:C12AeroGearHttp21JsonRequestSerializer[JsonRequestSerializer]. The former is a generic http serializer which encodes user's parameters to either on URL, or on the body of the request, depending on the http method utilized, whereas the latter encodes the parameters in JSON. Use them as a starting point for your own serializers.

=== ResponseSerializer

Once the request has been made and a response is received, the library will call link:https://aerogear.org/docs/specs/aerogear-ios-http/Protocols/ResponseSerializer.html#/s:FP12AeroGearHttp18ResponseSerializer16validateResponseUS0___FRQPS0_FTGSQCSo13NSURLResponse_4dataCSo6NSData5errorGVSs33AutoreleasingUnsafeMutablePointerGSqCSo7NSError___Sb[ResponseSerializer::validateResponse] and if valid will then call link:https://aerogear.org/docs/specs/aerogear-ios-http/Protocols/ResponseSerializer.html#/s:FP12AeroGearHttp18ResponseSerializer8responseUS0___FRQPS0_FCSo6NSDataGSqPSs9AnyObject__[ResponseSerializer::response] method to process the data received. Here are the signatures of those methods:

```swift
func validateResponse(response: NSURLResponse!, data: NSData, error: NSErrorPointer) -> Bool

func response(data: NSData) -> (AnyObject?)
```

The library already comes with built-in implementation of the form link:https://aerogear.org/docs/specs/aerogear-ios-http/Classes.html#/s:C12AeroGearHttp22JsonResponseSerializer[JsonResponseSerializer] and link:https://aerogear.org/docs/specs/aerogear-ios-http/Classes.html#/s:C12AeroGearHttp24StringResponseSerializer[StringResponseSerializer]. The former serializes the response to JSON whereas the latter returns the data as a simple String object. Use them as a starting point for your own serializers.

== Upload and Download

The library offers convenient access to upload and download mechanism offered by the perform plus the ability to perform a multipart upload. 

=== Upload

Here is an example usage on how to perform upload of a file:

```swift
var http = Http(baseURL: "http://server.com")

let fileURL = NSBundle.mainBundle().URLForResource("file", withExtension: "txt")

http.upload("/upload",  file:fileURL,
    progress: { (bytesWritten, totalBytesWritten, totalBytesExpectedToWrite)  in
        println("bytesWritten: \(bytesWritten), totalBytesWritten: \(totalBytesWritten), totalBytesExpectedToWrite: \(totalBytesExpectedToWrite)")
    }, completionHandler: { (response, error) in
        // handle response
})
```

NOTE: Internally and if not specified, the method will use _'POST'_ when performing upload, but you can choose to override it by passing  an appropriate link:https://aerogear.org/docs/specs/aerogear-ios-http/Enums.html#/s:O12AeroGearHttp10HttpMethod[HttpMethod] in the _'method'_ parameter.

Apart from NSURL objects pointing to local files you can also use an link:https://aerogear.org/docs/specs/aerogear-ios-http/Classes/Http.html#/s:FC12AeroGearHttp4Http6uploadFS0_FTSS4dataCSo6NSData10parametersGSqGVSs10DictionarySSPSs9AnyObject___6methodOS_10HttpMethod8progressGSqFTVSs5Int64S5_S5__T__17completionHandlerFTGSqPS3___GSqCSo7NSError__T__T_[NSData] or an link:https://aerogear.org/docs/specs/aerogear-ios-http/Classes/Http.html#/s:FC12AeroGearHttp4Http6uploadFS0_FTSS6streamCSo13NSInputStream10parametersGSqGVSs10DictionarySSPSs9AnyObject___6methodOS_10HttpMethod8progressGSqFTVSs5Int64S5_S5__T__17completionHandlerFTGSqPS3___GSqCSo7NSError__T__T_[NSStream] convenient methods.

=== Multipart Upload

Here is an example on how you can perform a multipart upload:

```swift
var http = Http(baseURL: "http://httpbin.org")

let file = MultiPartData(data: data, name: "lorem", filename: "lorem.txt", mimeType: "plain/text")

http.POST("/upload",  parameters: ["key": "value", "file": file], completionHandler: {(response, error) in
    // handle response
})
```

The difference with the post request shown earlier, is that on the request parameters list we add a link:https://aerogear.org/docs/specs/aerogear-ios-http/Classes/MultiPartData.html[MultiPartData] object which has it's data initialized from a string. If this type of object is recognized, the library will switch to perform a multipart upload, passing along both the parameters as well as the multipart data. The class also offers a link:https://aerogear.org/docs/specs/aerogear-ios-http/Classes/MultiPartData.html#/s:FC12AeroGearHttp13MultiPartDatacFMS0_FT4dataCSo6NSData4nameSS8filenameSS8mimeTypeSS_S0_[convenient constructor] to initialize using an NSURL object pointing to the file, which in this case the name and filename parameters are extracted from the file itself.

=== Download

Here is an example on how you can perform a download:

```swift
var http = Http()

http.download("http://server.com/filename.txt",
    progress: { (bytesWritten, totalBytesWritten, totalBytesExpectedToWrite)  in
        println("bytesWritten: \(bytesWritten), totalBytesWritten: \(totalBytesWritten), totalBytesExpectedToWrite: \(totalBytesExpectedToWrite)")
    }, completionHandler: { (response, error) in
        // handle response
})
```

By default the library uses the Applications 'Documents' directory to store the files received. If you want to store the file in a different directory add the link:https://aerogear.org/docs/specs/aerogear-ios-http/Classes/Http.html#/s:FC12AeroGearHttp4Http8downloadFS0_FTSS20destinationDirectoryGSqSS_10parametersGSqGVSs10DictionarySSPSs9AnyObject___6methodOS_10HttpMethod8progressGSqFTVSs5Int64S4_S4__T__17completionHandlerFTGSqPS2___GSqCSo7NSError__T__T_['_destinationDirectory_'] parameter when calling the method, passing along the path you would like to use.


===  HTTP Basic/Digest authentication support

The library also leverages the build-in foundation support for http/digest authentication and exposes a convenient interface by allowing the credential object to be passed on the request. Here is an example:

NOTE: It is advised that HTTPS should be used when performing authentication of this type

```swift
let credential = NSURLCredential(user: "john", password: "pass", persistence: .None)

http.GET("/protected/endpoint", credential: credential, completionHandler: {(response, error) in
   // handle response
})
```

You can also set a credential per protection space, so it's automatically picked up once http challenge is requested by the server, thus omitting the need to pass the credential on each request. In this case, you must initialize the link:https://aerogear.org/docs/specs/aerogear-ios-http/Classes/Http.html[Http] object with a custom session configuration object, that has its credentials storage initialized with your credentials:


```swift
// create a protection space
var protectionSpace: NSURLProtectionSpace = NSURLProtectionSpace(host: "httpbin.org", port: 443,`protocol`: NSURLProtectionSpaceHTTPS, realm: "me@kennethreitz.com", authenticationMethod: NSURLAuthenticationMethodHTTPDigest);

// setup credential
// notice that we use '.ForSession' type otherwise credential storage will discard and
// won't save it when doing 'credentialStorage.setDefaultCredential' later on
let credential = NSURLCredential(user: user, password: password, persistence: .ForSession)

// assign it to credential storage
var credentialStorage: NSURLCredentialStorage = NSURLCredentialStorage.sharedCredentialStorage()
credentialStorage.setDefaultCredential(credential, forProtectionSpace: protectionSpace);

// set up default configuration and assign credential storage
var configuration = NSURLSessionConfiguration.defaultSessionConfiguration()
configuration.URLCredentialStorage = credentialStorage

// assign custom configuration to Http
var http = Http(baseURL: "http://httpbin.org", sessionConfig: configuration)

http.GET("/protected/endpoint", completionHandler: {(response, error) in
   // handle response
})
```

Hope you will find our library useful. Head over to our link:https://github.com/aerogear/aerogear-ios-cookbook[Cookbook examples] for more example usages of the API and give us feedback on the link:https://aerogear.org/community/[mailing list].  We will love to hear your thoughts and suggestions!

