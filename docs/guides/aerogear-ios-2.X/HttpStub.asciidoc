---
layout: basic
title: AeroGear HttpStub
---

== Introduction

link:https://github.com/aerogear/aerogear-ios-httpstub[AeroGear HttpStub] is our attempt to provide a convenient library to perform stubbing of network requests to be used in unit-tests. It arised as a need when we were developing our link:https://github.com/aerogear/aerogear-ios-http[AeroGear Http library] and wanted a way to mock the network requests, but wanted to use pure Swift instead of relying on an existing objc-c library.  If you are familiar with the popular link:https://github.com/AliSoftware/OHHTTPStubs[OHHTTPStubs] library in the obj-c world, you will fill right at home since we try to retain similar flow:

== Usage

Here is a example usage in a test case:

```swift
override func setup() {   
    // set up http stub
    StubsManager.stubRequestsPassingTest({ (request: NSURLRequest!) -> Bool in
        return true
    }, withStubResponse:( { (request: NSURLRequest!) -> StubResponse in
        return StubResponse(data:NSData(), statusCode: 200, headers: ["Content-Type" : "text/json"])
    }))
}

override func tearDown() { 
    super.tearDown()

    StubsManager.removeAllStubs()
}
```

```swift
func testStubbedNetworkRequest() {
    // async test expectation
    let registrationExpectation = expectationWithDescription("testStubWithNSURLSessionDefaultConfiguration");

    let request = NSMutableURLRequest(URL: NSURL(string: "http://server.com")!)

    let config = NSURLSessionConfiguration.defaultSessionConfiguration()
    let session = NSURLSession(configuration: config)

    let task = session.dataTaskWithRequest(request) {(data, response, error) in
        XCTAssertNil(error, "unexpected error")
        XCTAssertNotNil(data, "response should contain data")
        
        registrationExpectation.fulfill()
    }

    task.resume()

    waitForExpectationsWithTimeout(10, handler: nil)
}
```

In our _setup_ method we hook our stubs by calling _StubsManager.stubRequestsPassingTest_ method, passing along two blocks. The first block allows you to customize whether stubbing would be applied by checking the link:http://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSURLRequest_Class/[NSURLRequest] object passed in automatically by the library. In our example, we return 'true', meaning we want the stub to be applied on all requests. The second block is the interesting one, in which we return the actual stub response encapsulated in a _StubResponse_ object.  The object accepts the actual data  as well as the http status and any headers you would like to append.

Now every network request started with the link:https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSURLSession_class/#//apple_ref/occ/instm/NSURLSession/dataTaskWithRequest:[NSURLSession::dataTaskWithRequest method] method will return the stubbed response.

NOTE: It's important on the unit-tests _tearDown()_ method to invoke  _StubsManager.removeAllStubs()_ to remove any stubs from the system, in order not to interfere with other running tests causing unexpected results.

NOTE: The stubbing would be applied for both link:https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSURLSessionConfiguration_class/index.html#//apple_ref/occ/clm/NSURLSessionConfiguration/defaultSessionConfiguration[NSURLSessionConfiguration::defaultSessionConfiguration] and link:https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSURLSessionConfiguration_class/index.html#//apple_ref/occ/clm/NSURLSessionConfiguration/ephemeralSessionConfiguration[NSURLSessionConfiguration::ephemeralSessionConfiguration] without having the need to explicitly specify.

== Stubbed response for different URL Paths

If you want to return different responses for separate URL paths you can use something like the following:

```swift
// set up http stub
StubsManager.stubRequestsPassingTest({ (request: NSURLRequest!) -> Bool in
    return true
}, withStubResponse:( { (request: NSURLRequest!) -> StubResponse in
    switch request.URL.path! {
    case "/endpointA":   // Stubbed response from '/endpointA'
        return StubResponse(data:"Hello".dataUsingEncoding(NSUTF8StringEncoding), statusCode: 200, headers: ["Content-Type" : "text/json"])
    case "/endpointB":   // Stubbed response from '/endpointB'
        return StubResponse(data:"World".dataUsingEncoding(NSUTF8StringEncoding),, statusCode: 200, headers: ["Content-Type" : "text/plain"])
    default: return StubResponse(data:NSData(), statusCode: 404, headers: ["Content-Type" : "text/json"])  // default return a 404
    }
}))
```

== Stubbed response loaded from a file

The library also provides a mechanism where you can use a local file as a stubbed response. The path to the actual file can be passed when constructing the stubbed response. Here are two examples in which the first load's the _'mystubbedjson.json'_ file located in the tests bundle, whereas the second from the Application's default _Documents_ directory.

```swift
// set up http stub from a stubbed file located in the test bundle
StubsManager.stubRequestsPassingTest({ (request: NSURLRequest!) -> Bool in
    return true
}, withStubResponse:( { (request: NSURLRequest!) -> StubResponse in
     return StubResponse(filename: "mystubbedjson.json", location:.Bundle(NSBundle(forClass: AGURLSessionStubsTests.self)), statusCode: 200, headers: ["Content-Type" : "text/json"])
}))

// or
// set up http stub from a stubbed file located in the 'Documents' directory
StubsManager.stubRequestsPassingTest({ (request: NSURLRequest!) -> Bool in
    return true
}, withStubResponse:( { (request: NSURLRequest!) -> StubResponse in
     return StubResponse(filename: "mystubbedjson.json", location:.Documents, statusCode: 200, headers: ["Content-Type" : "text/json"])
}))
```

Hope you will find our library useful when wanting to mock network requests in your unit-tests. Head over to our link:https://github.com/aerogear/aerogear-ios-httpstub/blob/master/AGURLSessionStubsTests/AGURLSessionStubsTests.swift[test-suite] for more example usage of the API and give us feedback on the link:https://aerogear.org/community/[mailing list].  We will love to hear your thoughts and suggestions!
