---
layout: basic
title: Getting Started with AeroGear and Xcode Template
---

== Getting Started with AeroGear and Xcode Template

As of version 1.0 of the AeroGear library, we are offering an Xcode template for our users to easily get started with the framework. This guide will help you setup the template in your existing Xcode installation. Once installed you can easily use the template as a basis for all your future AeroGear iOS applications. The guide assumes that you have Xcode IDE installed in your machine. If not, you can download it from the Apple developer web site link:https://developer.apple.com/xcode[here]. Let's get started.

=== Step 1: Install Xcode Template

link:https://github.com/aerogear/aerogear-ios-xcode-template/zipball/master[Click here] to download the latest version of the template from the link:https://github.com/aerogear/aerogear-ios-xcode-template[project's web site]. Once the download completes, uncompress the file and inside you will find an _AeroGear_ folder. 

image::./img/ios_template_folder.png[Template folder]

The folder contains the system configuration files that comprise the installable Xcode template. To assist Xcode to recognize the template, we need to copy it to a specific location in order for it to pick it up. Because the location is a hidden folder in the system, we need to manual do the copy operation using a terminal. 

Open a terminal and type:

[source,bash]
----
$ ls ~/Library/Developer/Xcode/Templates/Application/Project\ Templates/
----

If you get back a response that the folder does not exist it means that it's the first time you install a template and the location is not yet initialized. To fix that, simply create the folder otherwise skip to the next step.

[source,bash]
----
$ mkdir -p ~/Library/Developer/Xcode/Templates/Application/Project\ Templates/
----

and finally copy the template:

[source,bash]
----
$ cp -r AeroGear ~/Library/Developer/Xcode/Templates/Application/Project\ Templates/
----

=== Step 3: Verify installation

Fire up Xcode and when presented with the welcome screen, choose "Create a new Xcode Project".

image::./img/ios_welcome_screen.png[Welcome screen]

If the installation of the template was succesful, you will find the _AeroGear_ template under the iOS section. If not, please verify that you correctly install the template from Step 1.

image:./img/ios_template_wizard.png[AeroGear screen]

Select the template and click _Next_

Enter _"AeroGearExample"_ in the Product Name field and your initials as the Class Prefix. In this example I used _"AG"_.  The template also has support for specifying the authentication type and appropriate authentication code will also be generated. In the example application that we will build later, will connect to our TODO server which is configured with 'AeroGear Security' so choose this Authentication type. For the device family I used iPhone. 

image::./img/ios_project_details_screen.png[Details]

Xcode creates our project and we are presented with the default project screen.

image::./img/ios_template_project_screen.png[Main Project Screen]

Now that our project is created, there is one final step left before we can start using the project.

=== Step 3: Install Dependencies through CocoaPods

The project created by the AeroGear template uses link:http://cocoapods.org[CocoaPods] for managing any external library dependencies (including AeroGear). If you haven't used it so far in your iOS projects, please take the time to familiarize yourself. It will make your life much easier when dealing with dependencies (and upgrades!). Have a look at the link:http://cocoapods.org[web site] for installation details.

If you take a close look at the "Project Navigator" you will notice a file with name _Podfile_. This file is used by CocoaPods to install any library dependencies the project has. The template has already filled in "AeroGear" for us and you are free to add several other link:https://github.com/CocoaPods/Specs[popular libraries].

So time to install the dependencies.

Close the project window and using the terminal navigate to the project directory. Assuming you have correctly installed CocoaPods, simple do a:

[source,bash]
----
pod install
----

to install the dependencies. Further, this step will also create a workspace file (with the extension <project name>.xcworkspace) that contains the definitions for both the project and it's required library dependencies. We will use that file for now on when opening the project.

=== Step 4: Verify the installation

Let's verify the installation by building a sample application that will connect to the AeroGear link:http://todo-aerogear.rhcloud.com[TODO application] deployed on link:https://openshift.redhat.com/app/[OpenShift] and fetch the latest tasks. The tasks are then displayed on a standard UITableView component. 

=== AeroGearExampleAPIClient.m

At the Project Navigator click on "AeroGearExampleAPIClient.m". This _singleton_ instance class is used through out our project and hold references to the link:http://aerogear.org/docs/specs/aerogear-ios/Protocols/AGPipe.html[Pipe] objects allowing us to connect to remote RESTFul endpoints and perform CRUD operations on them. 

During application load, the method _loginWithUsername_ of the singleton class is invoked. It is responsible to perform the login against the remote service and upon successfully completion, to initialize our Pipe references. 

The first thing we need to do is add the URL of the remote TODO application. The template has already generated a convinient placeholder so go ahead and change the _kAeroGearExampleAPIBaseURLString_ constant to point to the TODO server that is 'http://todo-aerogear.rhcloud.com/todo-server'

[source,c]
----
static NSString * const kAeroGearExampleAPIBaseURLString = @"http://todo-aerogear.rhcloud.com/todo-server";  

...
- (void)loginWithUsername:(NSString *)username
                 password:(NSString *)password
                  success:(void (^)())success
                  failure:(void (^)(NSError *error))failure {

    NSURL *baseURL = [NSURL URLWithString:kAgProjectAPIBaseURLString];

    // create the Pipeline object
    AGPipeline *pipeline = [AGPipeline pipelineWithBaseURL:baseURL];  [1]

    // create the Authenticator object
    AGAuthenticator *authenticator = [AGAuthenticator authenticator]; [2]

    // request the default AeroGear authentication module from 'Authenticator'
    id <AGAuthenticationModule> todoAuthMod = [authenticator auth:^(id <AGAuthConfig> config) {  [3]
        [config setName:@"todoAuthMod"]; // assign it a name
        [config setBaseURL:baseURL]; // the base url to authenticate to
        [config setType:@"AG_SECURITY"]; // can be omitted as 'AG_SECURITY' is the default auth module
    }];

    // login to the service
    NSDictionary *credentials = @{@"username": username, @"password": password};
    [todoAuthMod login:credentials success:^(id responseObject) { [4]

        // if successfully logged in, it is time to construct our pipes.
        // Note that we assign the authentication module we
        // created earlier, so every request can be properly
        // authenticated against the remote endpoints.
        _pipe = [pipeline pipe:^(id <AGPipeConfig> config) { [5]
            [config setName:@"tasks"]; [6]
            [config setAuthModule:todoAuthMod]; 

        }];

        // ..add your own pipes here

        // inform client that we have successfully logged in
        success();

    } failure:^(NSError *error) {
        failure(error);
    }];
}
----

In [1] and [2] we initialize our link:http://aerogear.org/docs/specs/aerogear-ios/Classes/AGPipeline.html[Pipeline] and link:http://aerogear.org/docs/specs/aerogear-ios/Classes/AGAuthenticator.html[Authenticator] objects. Both act a factory in which the former creates link:http://aerogear.org/docs/specs/aerogear-ios/Protocols/AGPipe.html[Pipe] objects connected to remote endpoints, while the latter give us access to different authentication modules provided by AeroGear.

In [3] we request the default authentication module. The auth module returned will be used a) to login to the remote endpoint and b) assign it to the Pipe during the initial Pipe creation as we will see later on.

In [4] we use the authentication module to issue a _login_ [4] to the remote service. Upon successfully completion, we call the _pipe_ method [5] on our Pipeline object created earlier, and use the configuration block to set the name of the remote endpoint. On [6] we assign the name of the remote endpoint. Change this to _"tasks"_, as this is the remote endpoint that will fetch latest tasks. Finally, we assign the authentication module we created earlier. This will allow the Pipe to authenticate when performing requests to the remote endpoints.

Upon returning, _taskPipe_ is a fresh Pipe object connected to the remote "/tasks" endpoint.

This completes our walkthrough for the "AeroGearExampleAPIClient.m" class.

=== AGPViewController.m

At the Project Navigator click on "AGPViewController.m". This View Controller class holds the table component that will display the Task objects when they are retrieved from the server.

The connection and fetching of data is performed on the _viewDidLoad_ lifecycle method, called by the system after the view is loaded. 

[source,c]
----
- (void)viewDidLoad {
    [super viewDidLoad];

    // access the singleton instance that holds our pipes
    AgProjectAPIClient *apiClient = [AgProjectAPIClient sharedInstance]; [1]

    // first, we need to login to the service

    // Note: here we use static strings but a login screen
    // will provide the necessary authentication details.

    [apiClient loginWithUsername:@"john" password:@"123" success:^{ [2]

        // logged in successfully

        // time to retrieve remote data
          [[apiClient pipe] read:^(id responseObject) { [3]
            // do something with the response
            // e.g. updating the model

            _tasks = responseObject; [4]

            // instruct table to refresh view
            [self.tableView reloadData]; [5]

        } failure:^(NSError *error) {
            NSLog(@"An error has occured during read! \n%@", error);
        }];

    } failure:^(NSError *error) {
        NSLog(@"An error has occured during login! \n%@", error);
    }];
}
----

First we access the singleton instance [1] and we use it to issue a _login_ [2]. Change the convienient placeholders generated by the template to username _"john"_ and password _"123"_, an already configured test user on the remote TODO application.  Upon succesfully completion, a _read_ request on the pipe object is made [3] to fetch the latest tasks from the remote application. If the fetch was successful, we update our local model [4] and we instruct the table view component to refresh itself [5] to show the latest data.

One last thing remains is to fill the table delegate data source methods. The template has already generated the methods for us but with 'warning' that are incomplete. Change the implemenations signatures with the following:

[source,c]
----
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [_tasks count];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *CellIdentifier = @"Cell";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    
    if (cell == nil) {
        cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
    }
    
    NSUInteger row = [indexPath row];
    
    cell.textLabel.text = [[_tasks objectAtIndex:row] objectForKey:@"title"];
    
    return cell;
}
----

We are ready now to run the sample project. Double click on the generated xcworkspace file and when the project is opened select "Product->Run". If all goes well, you will be presented with the following screen:

image::./img/ios_template_emulator.png[Emulator]

This completes our walkthrough. For a more complete example application that uses AeroGear to perform link:http://en.wikipedia.org/wiki/Create,_read,_update_and_delete[CRUD] operations on a remote endpoint, have a look at the TODO application available on link:https://github.com/aerogear/aerogear-todo-ios[github].

You can also browse link:http://aerogear.org/docs/specs/aerogear-ios/[AeroGear iOS API reference] to familiarize yourself with the wealth of options.



