---
layout: basic
title: Sending messages
---

== Sending messages

Now that we have the web application running and we have registered both for 'broadcast' and 'mail' endpoints on the UnifiedPush server, it's time to send notifications. A bit earlier you received a _pushApplicationID_ and a _masterSecret_ after the successful registration of the Push Application. These IDâ€™s are used both for sending a broadcast and a selected send message to all registered SimplePush installations.

Let's start first by sending a 'broadcast' message. On a command line issue the following _CURL_ command:

[source,c]
----
curl -u "{PushApplicationID}:{MasterSecret}"
   -v -H "Accept: application/json" -H "Content-type: application/json"
   -X POST
   -d '{
       "key":"value",
       "alert":"HELLO!",
       "sound":"default",
       "badge":7,
    
       "simple-push":"version=123"
     }'

http://localhost:8080/ag-push/rest/sender/broadcast
----

Notice the added _simple-push_ key in the payload together with the 'version' field. AeroGear UnifiedPush server will interpret that key and for all registered SimplePush installations under the PushApplication, it will perform an HTTP PUT update at the 'broadcast' endpoint on the SimplePush server. This will cause the SimplePush server to send the push notification to web clients.

[NOTE]
Besides the _simple-push_ key, nothing else is submitted to the _Web clients_. All other keys shown in the payload (such as _alert_, _sound_ etc) are only submitted to the native Android/iOS platforms.

You should now see the 'broadcast' notification being received and appended in the textarea:

image:./img/unifiedpush_broadcast_screen.png[UnifiedPush Broadcast screen]


[NOTE]
If you want to send another push notification to that endpoint, make sure you are increasing the version number (e.g. version=124 or version=125 in this case)! Using the same version for that given endpoint does not cause a push notification to be sent to the client.

Similar to the 'broadcast' message payload, the 'selected' message payload also contains the _simple-push_ key, this time with a list of comma-separated 'category' names you assigned when you registered the endpoints to the UnifiedPush server in the previous section. 

[NOTE]
As with the 'broadcast send' nothing else is submitted to the _Web clients_ besides the _simple-push_ key. All other keys shown in the payload (such as _alert_, _sound_ etc) are only submitted to the native Android/iOS platforms.

On a command line issue the following _CURL_ command: 

[source,c]
----
curl -u "{PushApplicationID}:{MasterSecret}"
   -v -H "Accept: application/json" -H "Content-type: application/json"
   -X POST
   -d '{
      "message": {"key":"value", "alert":"HELLO!", "sound":"default", "badge":7},   

      "simple-push": { "mail":"version=123"}
   }'

http://localhost:8080/ag-push/rest/sender/selected
----

You should see again the 'mail' notification being received:

image:./img/unifiedpush_selected_screen.png[UnifiedPush Selected screen]


== You are done

UnifiedPush server integrates with SimplePush and treats it as another mobile variant, in par with iOS and Android platforms that we currently support. Now sending notifications to your mobile clients means that your web applications can benefit too, either running on a mobile device or on a desktop. As a final note, the SimplePush specification is an on-going effort from Mozilla and currently marked experimental, so some of the APIs outlined in the guide may change or deprecate. The AeroGear project pays close attention to the development of the SimplePush specification and will incorporate changes as soon as become available.  
