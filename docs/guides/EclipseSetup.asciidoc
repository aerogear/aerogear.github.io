---
layout: basic
title: Setting up Eclipse for Developing AeroGear Powered Android Applications 
---

== Setting up Eclipse for Developing AeroGear Powered Android Applications 

This guide is geared toward using the command line, and it also assumes that git and mvn are on your PATH.  If you are using Windows, you can use your tools of choice.

=== Requirements

* Java 6.0 (Java SDK 1.6)+
** link:http://www.oracle.com/technetwork/java/javase/downloads/index.html[The latest Java version can be found on Oracle's site]
* Maven 3+
** link:http://maven.apache.org/download.html[The latest Maven version can be found on Apaches's site]
* Git
** link:http://git-scm.com/downloads[The latest Git version can be found at http://git-scm.com]
* Android SDK
* Need to have an AVD image running 2.3.3 (API level 10)
** link:http://developer.android.com/sdk/index.html[The latest Android SDK and instructions to install]
* Eclipse 4.2 with ADT plugin
** link:http://www.eclipse.org/downloads/[The latest Eclipse version is availble from the Eclipse Foundation]
** link:http://developer.android.com/tools/sdk/eclipse-adt.html[Google's instructions on downloading and installing ADT]

=== Downloading and Importing AeroGear

AeroGear is a Maven based build project.  With the exception of one set up set, we eschew Maven for a more traditional Android + Eclipse experience.  As such we will not be using or need a2e and a2e-android.

==== Getting the source with git
When you clone your sources, be sure to NOT download them into your Eclipse workspace directory.

[source,bash]
----
 git clone https://github.com/aerogear/aerogear-android.git
 cd aerogear-android/
 mvn  dependency:copy;#This will download all of the required dependancies and place them in /libs
----

==== Importing the project into Eclipse

* Right click in project panel 

* Select Import 

image:img/Java_Eclipse_SDK_002.png[Eclipse Import Menu]



* Android -> Existing Android Code into Workspace -> Next

image:img/Import_003.png[Import New Android Project]



* Browse -> Your code -> check "Copy projects into workspace" 

image:img/Import_004.png[Configure Your Import]



* May have to set compiler compliance to 1.6 to clear some errors

image:img/Properties_for_aerogear-android_005.png[Java Compiler Properties]



* Set "Is Library"(Properties -> Android -> Is Library)

image:img/Properties_for_aerogear-android_006.png[Android Properties]

=== AeroGear-TODO
The TODO sample application relies on ActionBarSherlock and the AeroGear Android library project.

==== Downloading AeroGear-TODO and ActionBarSherlock

AeroGear and ActionBarSherlock are available on GitHub.

[source,bash]
----
 git clone https://github.com/aerogear/aerogear-android-todo.git
 git clone https://github.com/JakeWharton/ActionBarSherlock.git
----

==== Importing into Eclipse
First let's import ActionBarSherlock.  This is almost exactly the same as importing Aerogear and I will dispense with screenshots.

* Right click in project panel 
* Select Import 
* Android -> Existing Android Code into Workspace -> Next
* Browse -> ActionBarSherlock/library -> check "Copy projects into workspace" 
* May have to set compiler compliance to 1.6 to clear some errors
* Set is Library(Properties -> Android -> Is Library)

Importing TODO.  Again this is very similar to the other two projects, but I have included some screen shots where the process diverges.

* Right click in project panel 
* Select Import 
* Android -> Existing Android Code into Workspace -> Next
* Browse -> Your code -> check "Copy projects into workspace" 
* May have to set compiler compliance to 1.6 to clear some errors
* Add support libs

image:img/Java_Eclipse_SDK_010.png[ToDo Context Menu]

* Add references to ActionBarSherlock and AeroGear

image:img/Properties_for_TodoActivity_009.png[ToDo Applicaiton Poperties]


You should now be able to run the TODO Application in Eclipse.

