---
layout: basic
title: Apache Cordova iOS application
---

Creating a Cordova push application
-----------------------------------

Before we start, please install link:https://github.com/apache/cordova-cli/[Apache Cordova CLI], which is the command line tool to build, deploy and manage Cordova-based applications.

Next you need to _install_ our *Cordova Unified Push Plugin*

Sample App
~~~~~~~~~~

Creating a Cordova app is simple:

[source,c]
----
cordova create FolderOfTheApp com.my.id.AppName AppName
cd FolderOfTheApp
cordova platform add ios
cordova plugin add org.jboss.aerogear.cordova.push
----

*Note:* Make sure your Apple App ID matches the above _com.my.id.AppName_ value, otherwise it will *_not_* work.

Build the iOS application
~~~~~~~~~~~~~~~~~~~~~~~~~

It is now time to build the actual iOS project:

[source,c]
----
cordova build
----

In order to start playing with the project, you need to open the +FolderOfTheApp.xcodeproj+ file, located in +platforms/ios/+.

The JavaScript
~~~~~~~~~~~~~~

For the purpose of this demo we continue to use the +js/index.js+ file for our application. Below is the entire file:

[source,javascript]
----
// handle the incoming notifications
function onNotification(e) {
    if (e.badge) {
      push.setApplicationIconBadgeNumber(successHandler, e.badge);
    }

    alert('MESSAGE -> MSG: ' + e.alert);
}

var app = {
    initialize: function () {
        this.bind();
    },
    bind: function () {
        document.addEventListener('deviceready', this.deviceready, false);
    },
    deviceready: function () {
        app.initAeroGearPush();
        app.report('deviceready');
    },
    report: function(id) {
        console.log("report:" + id);
        // hide the .pending <p> and show the .complete <p>
        document.querySelector('#' + id + ' .pending').className += ' hide';
        var completeElem = document.querySelector('#' + id + ' .complete');
        completeElem.className = completeElem.className.split('hide').join('');
    },
    initAeroGearPush: function () {
        var config = {
          pushServerURL: "https://SERVER:PORT/CONTEXT/",
          ios: {
              variantID: "<variantID>",
              variantSecret: "<variantSecret>",
              alias: "some alias" // optional
          }
        }

        push.register(onNotification, successCallback, errorCallback, config);

        function successCallback() {
            console.log('registration successful');
        }

        function errorCallback(error) {
            alert('error registering:' + error);
        }
    }
};
----

Most of the code is actually already there, generated by Apache Cordova, so let's dive into the details.

Push Notification registry and setup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

At the beginning of the file there is a +onNotification+ function, which acts as a central hub invoked by the Cordova PushPlugin when it is time to deliver an push notification to the application. Now, If the application is not running, or is in the background, Cordova PushPlugin by default, will display the notification up into the notification drawer. If the user decides to click on it, the application would be brought to the foreground, and the +onNotification+ callback function would be called with the event set to 'alert'.

[source,javascript]
----
function onNotification(e) {
    //only on ios
    if (e.badge) {
      push.setApplicationIconBadgeNumber(successHandler, e.badge);
    }

    console.log('MESSAGE -> MSG: ' + e.alert);
}
----

The +successCallback+ is an JavaScript function that is invoked if the iOS environment could receive a device token from the APNs servers. The plugin executes the required native bits (similar like explained in the link:/docs/guides/aerogear-push-ios[iOS Push Tutorial]). If an error occurs within the registration with the APNs servers the +errorCallback+ is invoked. The _interesting_ part is the +options+ object: It tells the plugin what type of notification messages the application is interested in. Remember the +onNotificationAPN+ function from the beginning of the JavaScript file?

[source,javascript]
----
initAeroGearPush: function() {

    var config = {
      pushServerURL: "https://SERVER:PORT/CONTEXT/",
      ios: {
          variantID: "e.g. 610030de-904a-4e50-8043-37978ab32296",
          variantSecret: "e.g. b83186ae-127a-40bf-8fa7-a9eb41b2b33f",
          alias: "some alias"
      }
    }

    pushNotification.register(onNotification, successCallback, errorCallback, config);
}
----

Test the app on your device
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now run the app on the device. After agreeing on receiving Push Messages, you will see the default Apache Cordova page from the generated project. Now put the app into the background, by clicking the home button.


Sending messages to the device
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The last chapter shows how to link:../send-push[send messages] to the device, using the _AeroGear UnifiedPush Server_!

