---
layout: basic
title: Configure the build
---

Configure the Build
-------------------

There are a few preparatory steps you must take to be able to get an application up and running. For this example, we will be using ``pusheedemoapp''.

Getting the Code
~~~~~~~~~~~~~~~~
Clone the git repo of https://github.com/aerogear/aerogear-android[aerogear-android] and switch to the ``push'' branch
[source,c]
----
git clone https://github.com/aerogear/aerogear-android.git
git checkout push
----

Dependencies
~~~~~~~~~~~~

Since aerogear utilizes Maven, many of the below steps can be skipped by running
[source,c]
----
mvn dependency:copy
----
This will install the dependencies into the /libs folder of the project, so ADT will pick them up automatically.

If you choose not to build with Maven, then you will need to configure the projects in Eclipse. Right click ``aerogear-android'', choose ``Properties'', then choose ``Android'', and check ``Is Library''.
Now, right click PushEEDemo, and choose ``Properties'' again. Click ``Android'', and Add aerogear-android to the Library section. This will include the necessary resources needed for AeroGear. In addition, make sure that 
your build target is >= 4.0, due to the fragments API Google introduced.

Finally, we also need to add a few Android and Google resources to the build path. In the ``Java Build Path'' of PushEEDemo, 
choose ``Libraries'', and ``Add External JARs...'' We need to import android-support-v*.jar, where * denotes a version number.

*This JAR is located in $ANDROID_HOME/extras/android/support. If you do not have this in your SDK, use the SDK Manager to 
download it. Located under ``Extras'', install ``Android Support Library''.*

Depending upon your configuration, you may need to also reference the following external JARs (followed by location) in your *aerogear-android* project:

- Android Support Libraries: android-support-v*.jar ($ANDROID_HOME/extras/android/support/v*)
- Google Guava: https://code.google.com/p/guava-libraries/[guava.jar]
- Google GSon: https://code.google.com/p/google-gson/[gson-v-v-v.jar] (v is version)
- Google Play Services: google-play-services.jar ($ANDROID_HOME/extras/google/google_play_services/libproject/google-play-services_lib/libs/)

image::./img/build-path.png[Build Path Configuration]

Emulator or Device?
-------------------
Unlike iOS, the Android emulator is able to receive push notifications. If you wish to use an emulated device to test your application, it must be configured properly. Here's a list of resources and configurations you need:
- Google APIs (for the API level you're using/targeting) These are in the SDK manager
- An emulated device in the Android Virtual Device Manager, _targeting ``Google APIs (Google Inc.)''_

If you do not target the Google APIs for your API level, the GCM service will not be available for the device. Most Android devices on the market support these APIs, as long as they have the Google Play Store, which means they are https://support.google.com/googleplay/answer/1397129?hl=en[not licensed by Google] to use their services.

image::./img/nexus-4-target.png[A properly-configured virtual device]

If you are planning on using an actual Android device (tablet, phone, etc.), then you only need to have Android debugging enabled. To enable Developer Options in Jelly Bean, you must tap the ``Build Number'' in the ``About Phone'' screen 7 times. You also need to whitelist the computer's RSA key on the Android device.
Older Android devices have Developer Options available either in the main Settings panel, or within the ``Applications'' setting screen.
For more information regarding Developer Options/USB Debugging, see Google's http://developer.android.com/tools/device.html[Using Hardware Devices] article.


*Now, you can link:../register-device[Register the Device]*

