---
layout: basic
title: Getting Started with Java Sender client API
---

== Getting Started with Java Sender client API

AeroGear provides a Java library that allows you to programmatically access and send notifications to the AeroGear Unified Push server. The library can be used in your standalone Java applications as well as be embedded in a Java EE environment. This guide will explain the features of the API as well as give example usages for both scenarios. We assume you are already familiar with the concepts of the AeroGear UnifiedPush server. If not, please visit this link:http://aerogear.org/docs/specs/aerogear-server-push/[page] to get a general overview and also the project's link:https://github.com/aerogear/aerogear-unified-push-server[github] page for more information.

=== Installation

The library can be downloaded through the project link:https://github.com/aerogear/aerogear-unified-push-java-client[github] page or if you are using Maven, simply add the following dependency in your ```pom.xml```:

        <dependency>
            <groupId>org.jboss.aerogear.unifiedpush</groupId>
            <artifactId>unified-push-java-client</artifactId>
            <version>0.2.0</version>
        </dependency>

=== API Overview

The API is straightforward to use and consists of the following interface:
  
[source,java]
----
public interface JavaSender {

    /**
     * Sends the given payload to all installations of the referenced PushApplication.
     */
    void broadcast(UnifiedMessage unifiedMessage);

    /**
     * Sends the given payload to a selection of installations of the referenced PushApplication.
     */
    void sendTo(UnifiedMessage unifiedMessage);
}
----

The _UnifiedMessage_ object passed as a parameter on those methods contain the actual notification payload. The object, as we will see in the example later on, utilizes the builder pattern to help you construct easily the payload.

A concrete implementation of the _JavaSender_ interface can be found on the 'SenderClient' class, which internally uses _HttpURLConnection_ for the communication (but can easily be adopted to support other http providers).

=== Broadcast send

Let's start now with a simple example of a 'broadcast' send, where the notification is send to all mobile variants registered under the Push Application ID: 

[source,java]
----
JavaSender sender = new SenderClient("http://localhost:8080/ag-push");       // [1]

UnifiedMessage unifiedMessage = new UnifiedMessage.Builder()                 // [2]
                .pushApplicationId("c7fc6525-5506-4ca9-9cf1-55cc261ddb9c")  
                .masterSecret("8b2f43a9-23c8-44fe-bee9-d6b0af9e316b")
                .alert("Hello from Java Sender API!")
                .sound("default")
                .badge("1")
                .attribute("some_key", "with_value")  // add a user defined attribute applicable to your context.
                .simplePush("version=123")  // applicable for 'SimplePush' Variants only
                .build();

sender.broadcast(unifiedMessage);    // [3]
----

In [1] we initialize the client passing the hostname of the running AeroGear UnifiedPush Server. In [2], we access the builder object and we use it to fill in the parameters. The _pushApplicationId_ and _masterSecret_ params are used to identify the particular Push Application on the UnifiedPush server as well as performing authentication against it. You were given them when you initially registered your PushApplication with the server. Ensure they are present and valid, otherwise there will be an error when trying to send. Further, support is provided with the help of the _attribute_ param, to attach on the notification arbitary key/value pairs that make sense on your business context. Those pairs will eventually be interpreted by your client code once the notification arrives.

=== Selected send

To narrow down the list of the recipients, you are given the following options: (shown with the respective builder method)

- narrow down by a specific mobile variant (e.g. HR Android, HR iPhone):
[source,java]
----
    variants("c3f0a94f-48de-4b77-a08e-68114460857e" /* HR_Premium */, "444939cd-ae63-4ce1-96a4-de74b77e3737" /* HR_Free */);
----
- narrow down by specific alias, thus allowing to send a message directly to a specific mobile installation. Note that here we used an email address, but anything that helps to identify a user can be used (e.g. username, user ID, etc)
[source,java]
----
    .aliases("john@somewhere.com", "maria@somewhere.com");
----
- narrow down by a specific device type:
[source,java]
----
    .deviceType("iPhone", "iPad_Mini");
----
- narrow down by a category:
[source,java]
----
   .category("someCategory");
----

As you realize from the list, the Sender API offers _tremendous_ flexiblity in supporting even the most complex schenarios. You can mix and match options to target a specific mobile audience. 

Once the UnifiedMessage is build with your desired criterias, simply call the _sendTo_ method on the JavaSender to send the notification.


=== Integrating with Java EE

The library can be used inside a Java EE environment to enable your enterprise applications to send notification messages to mobile clients, when e.g. a particular business event occurs. Let's see one approach of integration through an example of a PaymentGateway.

A payment request is initiated through a REST endpoint. The endpoint delegates the processing to an EJB and if the transaction succeeds, a CDI Payment Event is fired. The event is then picked up from CDI Observer bean, which then uses the JavaSender API to send a notification back to client.

[source,java]
----
/**
 *  Various resource produces e.g. PersistentContext etc.
 */
public class Resources {

    // ...

    @Produces
    @ApplicationScoped
    public SenderClient getSenderClient() {
       // initialize to point to the hostname of the running UnifiedPush server
       return new SenderClient("http://localhost:8080/ag-push/");
    }
}
----

Payment.java

[source,java]
----
/**
 * Models a payment
 */
 public class Payment {

    private String userAlias;
    private BigDecimal amount;
    private Date datetime;

    public BigDecimal getAmount() {
        return amount;
    }

    public void setAmount(BigDecimal amount) {
        this.amount = amount;
    }

    public String getUserAlias() {
        return userAlias;
    }

    public void setUserAlias(String userAlias) {
        this.userAlias = userAlias;
    }
}
----

PaymentResource.java

[source,java]
----
/**
 *  A JAX-RS endpoint for clients to kickstart payment processing
 */
 @Path("/payments")
 public class PaymentResource {

  @Inject
  PaymentsProcessor processor;

  @POST
  @Consumes("application/json")
  public Response pay(Payment payment) {
    processor.pay(payment)

    return Response.ok().build();
  }    
}
----

PaymentsProcessor.java

[source,java]
----
/**
 *  The EJB responsible for processing the payment
 */
@Stateless
public class PaymentsProcessor {

    @Inject
    Event<Payment> event;

    public void pay(Payment payment) {
        // process the payment
        // ...

        event.fire(payment);
    }
}
----

NotificationSender.java

[source,java]
----
/**
 * The class that listens for payment events 
 * and responsible to send receipt notifications
 */
public class NotificationSender {

  @Inject 
  SenderClient sender;

  // here the CDI 'Payment' event is caught and the actual send is triggered
  void sendPaymentNotification(@Observes(during = AFTER_SUCCESS) Payment payment) { 
      UnifiedMessage unifiedMessage = new UnifiedMessage.Builder()
                .pushApplicationId("c7fc6525-5506-4ca9-9cf1-55cc261ddb9c")  
                .masterSecret("8b2f43a9-23c8-44fe-bee9-d6b0af9e316b")
                .alert("Thank you for your payment!")
                .sound("default")
                .aliases(Arrays.asList(payment.getUserAlias()))
                .build();

      sender.sendTo(message)
  }
}
----

=== Conclusion

The Sender API is simple and easy to use, allowing you to connect to the UnifiedPush server and send notifications. It can be used both in your standalone applications or be embedded in a Java EE environment. Work is being done to port it to other languages too and if you are interested you can give us a hand too! Please join our link:https://lists.jboss.org/mailman/listinfo/aerogear-dev[developer mailing list], or find us on link:irc://irc.freenode.net/aerogear[IRC] and introduce yourself!





















