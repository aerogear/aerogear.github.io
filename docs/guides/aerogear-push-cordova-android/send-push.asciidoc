---
layout: basic
title: Sending messages
---

Now you have the Cordova App running, so it is time to use the _AeroGear UnifiedPush Server_ for delivering a _Push Notification_ message!

== Simple Sender

A bit earlier you received a _pushApplicationID_ and a _masterSecret_ after the successful registration of the _Push Application_. These ID's  are used for sending a _broadcast_ message to all _registered_ devices (installations). Now, on a command line issue the following _CURL_ command:

[source,c]
----
curl -u "{pushApplicationID}:{masterSecret}"
   -v -H "Accept: application/json" -H "Content-type: application/json" 
   -X POST -d '{"alert":"AeroGear UnifiedPush and Apache Cordova 3.0.6"}'
   http://SERVER:PORT/CONTEXT/rest/sender/broadcast
----

The payload is simply a JSON map. You can send different key/value pairs, but be sure it is not too long, otherwise Google does _NOT_ deliver the message.
By default the _message_ key is shown in a notification when the application is in the background you'll have to change line 102 of the _GCMIntentService.java_ to change that into _alert_!

Then a _Popup_ will show up, which displays the value of the _alert_ key:

image:./img/PushMessage.png[Android Push Notification]


== Custom Dialog

While the application is running, the above described feature is _NOT_ available. However, in this case the ++ JavaScript function will receive the message:

[source,javascript]
----
function onNotification(e) {
    // display the push notification message... (extract the alert key value....)
    alert(e.payload.alert);
}
----

This is how it looks when running:

image:./img/CustomDialog.png[Custom Dialog]


== You are done

That's all you need to use the _AeroGear_ project for sending, and receiving _Push Notifications_ for an android device.

=== A final note

When using _Push Notifications_, have in mind that it's more for signaling and once in a while notifying a client. 


