---
layout: basic
title: Apache Cordova android application
---

Creating a Cordova push application
-----------------------------------

Before we start, please install link:https://github.com/apache/cordova-cli/[Apache Cordova CLI], which is the command line tool to build, deploy and manage Cordova-based applications.

Next you need to _install_ the *Cordova Push Notifications Plugin for Android and iOS*. With the 3.0.x version of Apache Cordova you need to clone this link:https://github.com/jdhiro/PushPlugin[fork/repo]. Once checkout out, _remember_ the installation path of the repository.

Sample App
~~~~~~~~~~

Creating a Cordova app is simple:

[source,c]
----
cordova create FolderOfTheApp com.my.id.AppName AppName
cd FolderOfTheApp
cordova platform add android
cordova plugin add folder_of_PushPlugin
----

JavaScript libraries
~~~~~~~~~~~~~~~~~~~~

Next install the link:http://aerogear.org/download/custom[+aerogear.js+ library] check the UnifiedPush Client SDK chekbox and click +Build my Download+, then download latest link:http://jquery.com/download[jQuery] version. Save these files into the +www+ folder of your Apache Cordova project.

Build the android application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It is now time to build the actual android project:

[source,c]
----
cordova build
----

In order to start playing with the project, you can import it with your favorite IDE the android project is located in +platforms/android+.

The JavaScript
~~~~~~~~~~~~~~

Inside of the +index.html+ you need to add references to the required JavaScript files:

[source,javascript]
----
...
<script type="text/javascript" src="jquery-1.10.2.min.js"></script>
<script type="text/javascript" src="aerogear.custom.js"></script>
<script type="text/javascript" src="cordova.js"></script>
<script type="text/javascript" src="PushNotification.js"></script>
<script type="text/javascript" src="js/index.js"></script>
<script type="text/javascript">
    app.initialize();
</script>
...
----

Besides the aerogear.custom.js and its dependency, the +PushNotification.js+ file from the PushPlugin needs to be referenced as well. For the purpose of this demo we continue to use the +js/index.js+ file for our application. Below is the entire file:

[source,javascript]
----
// handle the incoming notifications
function onNotification(e) {
    console.log('EVENT -> RECEIVED:' + e.event);
    switch (e.event) {
        case 'registered':
            if (e.regid.length > 0) {
                console.log('REGISTERED -> REGID:' + e.regid);
                //now you can register this device with this registration id
                app.registerDevice(e.regid)
            }
            break;

        case 'message':
            // if this flag is set, this notification happened while we were in the foreground.
            // you might want to play a sound to get the user's attention, throw up a dialog, etc.
            if (e.foreground) {
                console.log('--INLINE NOTIFICATION--');
                // if the notification contains a soundname, play it.
                var my_media = new Media("/android_asset/www/" + e.payload.sound);
                my_media.play();
            }
            else {   // otherwise we were launched because the user touched a notification in the notification tray.
                if (e.coldstart) {
                    console.log('--COLDSTART NOTIFICATION--');
                }
                else {
                    console.log('--BACKGROUND NOTIFICATION--');
                }
            }

            console.log('MESSAGE -> MSG: ' + e.payload.alert);
            break;

        case 'error':
            console.log('ERROR -> MSG:' + e.msg);
            break;

        default:
            console.log('EVENT -> Unknown, an event was received and we do not know what it is');
            break;
    }
}

var app = {
    initialize: function () {
        this.bind();
    },
    bind: function () {
        document.addEventListener('deviceready', this.deviceready, false);
    },
    deviceready: function () {
        app.initAeroGearPush();
        app.report('deviceready');
    },
    report: function(id) {
        console.log("report:" + id);
        // hide the .pending <p> and show the .complete <p>
        document.querySelector('#' + id + ' .pending').className += ' hide';
        var completeElem = document.querySelector('#' + id + ' .complete');
        completeElem.className = completeElem.className.split('hide').join('');
    },
    registerDevice: function (token) {
        // create the unified push helper:
        var agUnifiedPush = AeroGear.UnifiedPushClient(
            "variantID",
            "secret",
            "https://SERVER:PORT/CONTEXT/rest/registry/device"
        );

        agUnifiedPush.registerWithPushServer({
            alias: "alias",
            deviceToken: token
        });
    },
    initAeroGearPush: function () {
        // get the push plugin object
        var pushNotification = window.plugins.pushNotification;

        // set callbacks for dealing with the DeviceToken, or an Error
        pushNotification.register(
            function (result) {
                console.log('success: ' + result);
            },
            function (error) {
                console.log('error: ' + error);
            },
            {"senderID": "e.g. 4815162342", "ecb": "onNotification"}
        );
    }
};
----

Most of the code is actually already there, generated by Apache Cordova, so let's dive into the details.

Push Notification registry and setup
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

At the beginning of the file there is a +onNotification+ function, which is a JavaScript callback that is receiving the notifications, while the application is running. There are a couple of different type of events that will come in. When we are registered by GCM service we get a registation id back we'll need the Unified Push server know about our device id that is why we call registerDevice.

In main other case is that we receive a message and we handle different senarios here if the application _only_ is in the background a notification will be shown. So in this forground case we might want to do something different then just log the message or play a sound.

[source,javascript]
----
function onNotification(e) {
    console.log('EVENT -> RECEIVED:' + e.event);
    switch (e.event) {
        case 'registered':
            if (e.regid.length > 0) {
                console.log('REGISTERED -> REGID:' + e.regid);
                //now you can register this device with this registration id
                app.registerDevice(e.regid)
            }
            break;

        case 'message':
            // if this flag is set, this notification happened while we were in the foreground.
            // you might want to play a sound to get the user's attention, throw up a dialog, etc.
            if (e.foreground) {
                console.log('--INLINE NOTIFICATION--');
                // if the notification contains a soundname, play it.
                var my_media = new Media("/android_asset/www/" + e.payload.sound);
                my_media.play();
            }
            else {   // otherwise we were launched because the user touched a notification in the notification tray.
                if (e.coldstart) {
                    console.log('--COLDSTART NOTIFICATION--');
                }
                else {
                    console.log('--BACKGROUND NOTIFICATION--');
                }
            }

            console.log('MESSAGE -> MSG: ' + e.payload.alert);
            break;

        case 'error':
            console.log('ERROR -> MSG:' + e.msg);
            break;

        default:
            console.log('EVENT -> Unknown, an event was received and we do not know what it is');
            break;
    }
}
----

To trigger the setup of the _PushPlugin_ we have added a +initAeroGearPush+ function onto the +app+ scope, the function is invoked by the +onDeviceReady+ function which itself is invoked once the Apache Cordova related initialization is done. The is responsible to get a reference of the Plugin's +pushNotification+ object in order to invoke its +register+ function:

[source,javascript]
----
initAeroGearPush: function() {
    // get the push plugin object
    var pushNotification = window.plugins.pushNotification;

    // set callbacks for dealing with the device token or an Error.
    // The options specify the interest of the different APNs message event types.
    pushNotification.register(successCallback, errorCallback, options);
}
----

In the +registerDevice+ we create a UnifiedPushClient, passing along the _variant ID_, _variant secret_ and the _registration url_. We pass the +deviceToken+ from the GCM and setting an +alias+ (e.g. a username or an email address). Finally we perform a registration with the UnifiedPush server.

[source,javascript]
----
registerDevice: function (token) {
        // create the unified push helper:
        var agUnifiedPush = AeroGear.UnifiedPushClient(
            "variantID",
            "secret",
            "https://SERVER:PORT/CONTEXT/rest/registry/device"
        );

        agUnifiedPush.registerWithPushServer({
            alias: "alias",
            deviceToken: token
        });
    }
----    

The +errorCallback+ is pretty trivial, simply doing a +console.log("Fail");+

Test the app
~~~~~~~~~~~~

Now run the app, you will see the default Apache Cordova page from the generated project. Now put the app into the background, by clicking the home button.


Sending messages
~~~~~~~~~~~~~~~~

The last chapter shows how to link:../send-push[send messages], using the _AeroGear UnifiedPush Server_!

