== Using Jenkinsfiles in an app

=== Checkout source code
To checkout a projects source code the `checkout` step can be used.

[source,groovy]
----
node("android"){
  ...
  stage("Checkout"){
    checkout scm
  }
  // Build project
  ...
}
----

=== Adding a configuration file (RHMAP only)
When building apps in RHMAP a properties file should be added to the app to
allow it to make backend requests. In Android this is a properties file named
`fhconfig.properties`, in iOS this is a plist file named `fhconfig.plist`. The
contents of these files is provided in the Jenkinsfile through
`params.FH_CONFIG_CONTENT`. Below are examples of populating the configuration
file for Android and iOS.

.fhconfig Android properties file
[source,groovy]
----
node("android") {
  // Checkout source code
  ...
  stage("Prepare"){
    writeFile file: 'app/src/main/assets/fhconfig.properties', text: params.FH_CONFIG_CONTENT
  }
  ...
}
----

.fhconfig iOS plist file
[source,groovy]
----
node("android") {
  stage("Prepare") {
    writeFile: file: 'app/fhconfig.plist', text: params.FH_CONFIG_CONTENT
  }
}
----

=== Signing Android build
When an Android apk is created it can be signed using the provided
`signAndroidApks` function.

[source,groovy]
----
node("android"){
  // Build the apk
  ...
  stage("Sign"){
    if (params.BUILD_CONFIG == 'release') {
        signAndroidApks (
          keyStoreId: "${params.BUILD_CREDENTIAL_ID}",
          keyAlias: "${params.BUILD_CREDENTIAL_ALIAS}",
          apksToSign: "**/*-unsigned.apk",
          // uncomment the following line to output the signed APK to a
          separate directory as described above
          // signedApkMapping: [ $class: UnsignedApkBuilderDirMapping ],
        )
    } else {
      println('Debug Build - Using default developer signing key')
    }
  }
  ...
}
----

The `signAndroidApks` function takes the following parameters.

.signAndroidApks options
|===
| Parameter | Description

| keyStoreId
| Keystore ID. This will be provided through the `BUILD_CREDENTIAL_ID`
parameter if the app is built through RHMAP.

| keyAlias
| Alias of the private key/certificate chain. This will be provided through the `BUILD_CREDENTIAL_ALIAS` parameter if the app is built through RHMAP.

| apksToSign
| A file name or glob pattern specifying the APK files to store.

| signedApkMapping
| Output the signed APK to a separate directory than the unsigned APK. Omit if
storing in the same directory.

| androidHome
| Override Android home directory.
|===

=== Building projects with Xcode
To build Xcode projects you can use the `xcodeBuild` function in your
Jenkinsfile, this requires the `XC_VERSION` environment variable to be defined.
To sign the app the `xcodeBuild` function can then be used.

[source,groovy]
----
node('ios'){
  ...
  stage('Build') {
    withEnv(['XC_VERSION=8.3']) {
      xcodeBuild(
        cleanBeforeBuild: true,
        src: 'helloworld-ios-swift',
        schema: 'helloworld-ios-app',
        workspace: 'helloworld-ios-app',
        buildDir: 'build',
        sdk: 'iphoneos',
        version: '0.1-alpha',
        shortVersion: '0.1',
        bundleId: 'com.feedhenry.helloworld-ios-app',
        infoPlistPath: 'helloworld-ios-app/helloworld-ios-app-Info.plist',
        flags: '-fstack-protector -fstack-protector-all ENABLE_BITCODE=NO',
        autoSign: false
      )
    }
  }

  stage('CodeSign') {
    codeSign(
      profileId: "${params.BUILD_CREDENTIAL_ID}",
      clean: true,
      verify: true,
      ipaName: 'myapp',
      appPath: 'helloworld-ios-swift/build/Debug-iphoneos/helloworld-ios-app.app'
    )
  }
  ...
}
----

The funtion takes the following parameters.

.xcodeBuild options
|===
| Parameter | Description

| cleanBeforeBuild
|	This will delete the build directories before invoking the build. This will
force the rebuilding of all dependencies and can make large projects take a lot
longer

| target
| The target to build. If left empty, this will build all targets in the
project. If you wish to build your binary and the unit test module, it is best
to do this as two separate steps each with their own target.

| sdk
| You only need to supply this value if you want to specify the SDK to build
against. If empty, the SDK will be determined by XCode.

| workspace
| Workspace to build from.

| buildDir
| The value to use for CONFIGURATION_BUILD_DIR setting (BUILD_DIR in >= 2.0.0).

| version
| Version of the app.

| shortVersion
| Short representation of the apps version.

| autoSign
| Whether to sign the app automatically or not.

| infoPlistPath
| Path to the apps plist file.

| flags
| Flags to add to the command that is executed.
|===

.codeSign options
|===
| Parameter | Description

| profileId
| ID of the developer profile. This will be provided through the
`BUILD_CREDENTIAL_ID` parameter if the app is built through RHMAP.

| clean
| Removes the previous signature (if any) before signing the artifact.

| verify
| Whether or not to verify the signature of the app after signing.

| ipaName
| Name of the created ipa file.

| appPath
| Path to the app to sign.
|===

=== Example Jenkinsfiles

* https://github.com/feedhenry-templates/welcome-android-gradle/blob/master/Jenkinsfile[Jenkinsfile for RHMAP Android Template]
// TODO: Add in Jenkinsfile for iOS template.
