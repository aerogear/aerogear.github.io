---
layout: basic
title: Controller 1.0.0
---

AeroGear Controller 1.0.0 - DRAFT
=================================
:Author: Doug Campos
:Author: Jay Balunas

This document covers the requirements, use-cases and planned APIs for the AeroGear Controller.  Completed functionality may be moved, removed, or updated in the aerogear-controller link:https://github.com/aerogear/aerogear-controller[README.md] file.

External References
-------------------

* link:https://github.com/aerogear/aerogear-controller/[Github Repo]
* link:https://github.com/aerogear/aerogear-controller/blob/master/README.md[README.md]
* link:https://github.com/aerogear/aerogear-controller-demo[Controller Demo]
* link:https://issues.jboss.org/browse/AEROGEAR/component/12315661[AEROGEAR Jira component]

Release Roadmap
---------------

The AeroGear Controller will have its own versioning.  Its Roadmap should be defined here.

1.0.0.Alpha1
~~~~~~~~~~~~

*TODO* complete

1.0.0.M1
~~~~~~~~

*TODO* complete

Requirements
------------

__Extracted from QMX's Blog & AEROGEAR-312__

These requirements are extracted from link:http://blog.qmx.me/aerogear-controller-alpha-is-out/[QMX's blog], and link:https://issues.jboss.org/browse/AEROGEAR-312[AEROGEAR-312] comments from Pete.  These are not finalized!

1. The MVC container should provide tight integration with CDI. MVC objects should be non-contextual CDI beans, with their lifecycle managed by the MVC container.
2. The principal programming model is programmatic, rather than declarative. A declarative model may be added.
3. The programming model and configuration should be entirely Java driven, there should be no XML configuration.
4. The core container will be tightly scoped to just meet these requirements. The CDI extension model will be used to provide additional functionality to the MVC container, which are outside the scope of the core container.
5. Implicit parameter validation and conversion is outside the scope of the core container, and should be provided via extensions.
6. RESTful endpoints will be provided using a programmatic API provided by RESTEasy, closely modeled after the JAX-RS declarative API.
7. Parameters within paths should be fully supported, and can be extracted within the route definition
8. View renderers should be pluggable
9. View renderers provided should include: JSP, Haml, Tilt
10. A pluggable view dispatcher should be provided, to allow automatic mapping between the controller and the views
11. The ability to secure endpoints with fine grained permissions

Use-Cases
---------

__View Support Options__

* Haml
** link:https://github.com/aerogear/aerogear-haml[/aerogear-haml] repository

__Authentication for secure access to pages__

__Authorization for secure access to pages by user/role__


Server Hooks For Client Libraries
---------------------------------

Part of the role of the AeroGear controller is to act as a server-side integration hook for requirements of the client libraries that are not available or easily integrated in other JBoss projects.

* Security
** Initial security calls for client libraries will likely require routing through the controller
* Persistence
** TBD

